#include <stdio.h>
#include <string.h>
#include <ctype.h>

char matrix[5][5];

// Removes duplicates and fills matrix with keyword and remaining letters
void generateMatrix(char key[]) {
    int used[26] = {0};
    used['J' - 'A'] = 1; // Merge I and J
    int k = 0;

    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (isalpha(ch) && !used[ch - 'A']) {
            matrix[k / 5][k % 5] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            matrix[k / 5][k % 5] = ch;
            k++;
        }
    }
}

// Finds position of a letter in the matrix
void findPos(char c, int* row, int* col) {
    if (c == 'J') c = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (matrix[i][j] == c) {
                *row = i;
                *col = j;
                return;
            }
}

// Encrypts digraphs using Playfair rules
void encrypt(char text[]) {
    int len = strlen(text);
    for (int i = 0; i < len; i += 2) {
        char a = toupper(text[i]);
        char b = toupper(text[i + 1]);

        if (a == b) b = 'X';

        int r1, c1, r2, c2;
        findPos(a, &r1, &c1);
        findPos(b, &r2, &c2);

        if (r1 == r2)
            printf("%c%c", matrix[r1][(c1 + 1) % 5], matrix[r2][(c2 + 1) % 5]);
        else if (c1 == c2)
            printf("%c%c", matrix[(r1 + 1) % 5][c1], matrix[(r2 + 1) % 5][c2]);
        else
            printf("%c%c", matrix[r1][c2], matrix[r2][c1]);
    }
    printf("\n");
}

int main() {
    char key[] = "KEYWORD";
    char plaintext[] = "HELLO";

    // Make sure plaintext length is even
    if (strlen(plaintext) % 2 != 0) strcat(plaintext, "X");

    generateMatrix(key);
    printf("Encrypted text: ");
    encrypt(plaintext);

    return 0;
}
